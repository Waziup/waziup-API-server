swagger: '2.0'
info:
  title: WAZIUP API
  description: Applications API
  version: 1.0.0
host: '127.0.0.1:8000'
schemes:
  - http
basePath: /api/v1
produces:
  - application/json
consumes:
  - application/json
parameters:
  domainParam:
    name: domain
    in: path
    required: false
    type: string
    example: waziup
  sensorId:
    name: sensor_id
    in: path
    required: true
    type: string
    example: Sensor2-ea0541de1ab7132a1d45b85f9b2139f5
  measurementId:
    name: measurement_id
    in: path
    required: true
    type: string
    example: TC1
  MsgId:
    name: msg_id
    in: path
    required: true
    type: string
    example: 0d710b12-27e8-433d-ab3a-e05b7127eeac
  NotifId:
    name: notif_id
    in: path
    required: true
    type: string
    example: 0d710b12-27e8-433d-ab3a-e05b7127eeac
  UserId:
    name: userid
    in: path
    required: true
    type: string
    example: 2ecfae24-f340-4ad0-a12e-02cdc60cd8ba
definitions:
  Sensor:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: Unique ID of the sensor node
        example: Sensor2-ea0541de1ab7132a1d45b85f9b2139f5
      gateway_id:
        type: string
        description: Unique ID of the gateway
        example: ea0541de1ab7132a1d45b85f9b2139f5
      name:
        type: string
        description: name of the sensor node
        example: "My weather station"
      owner:
        type: string
        description: owner of the sensor node
        example: cdupont
      measurements:
        type: array
        items:
          $ref: '#/definitions/Measurement'
      location:
        $ref: '#/definitions/Location'
  Location:
    type: object
    description: >-
      location is a pair [latitude, longitude] with the coordinates on earth in
      decimal notation (e.g. [40.418889, 35.89389]).
    properties:
      latitude:
        type: number
        example: 5.36
      longitude:
        type: number
        example: 4.0083
  Measurement:
    type: object
    properties:
      id:
        type: string
        description: ID of the measurement
        example: TC1
      name:
        type: string
        description: name of the measurement
        example: My garden temperature
      dimension:
        type: string
        description: physical dimension of the measurement
        example: temperature
      unit:
        type: string
        description: unit of the measurement
        example: Degree C
      sensor_kind:
        type: string
        description: kind of sensor providing the measurement 
        example: Air temperature sensor
      values:
        type: array
        items:
          $ref: '#/definitions/MeasurementValue'
  MeasurementValue:
    type: object
    properties:
      value:
        type: number
        format: float
        description: value of the measurement
        example: '25.6'
      timestamp:
        type: string
        format: dateTime
        description: time of the measurement
        example: '2016-06-08T18:20:27.873Z'
  HistoricalValue:
    type: object
    properties:
      id:
        type: string
        description: UUID of the sensor
        example: 0d710b12-27e8-433d-ab3a-e05b7127eeaa
      attribute_id:
        type: string
        description: UUID of the measurement
        example: 0d710b12-27e8-433d-ab3a-e05b7127eeaa
      datapoint:
        $ref: '#/definitions/MeasurementValue'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  AuthBody:
    type: object
    title: credentials
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: username
        example: cdupont
      password:
        type: string
        description: password
        example: password
  UserUpdateBody:
    type: object
    title: userupdate
    required:
      - firstName
      - lastName
    properties:
      firstName:
        type: string
        description: User's First Name
      lastName:
        type: string
        description: User's Last Name
      id:
        type: string
        description: User id
  SocialMessage:
    type: object
    description: One social network message
    required:
      - user_id 
      - channel
      - message
    properties:
      username:
        type: string
        description: User name in Keycloak
        example: 'cdupont'
      channel:
        type: string
        example: 'facebook'
      message:
        type: string
        example: 'Test message'
  SocialMessageBatch:
    type: object
    description: A message to be sent to several users and socials
    required:
      - userNames 
      - channels
      - message
    properties:
      usernames:
        type: array
        description: names of the destination users 
        items:
          type: string 
        example: ['cdupont', 'arahim']
      channels:
        type: array
        description: channels where to send the messages 
        items:
          type: string 
        example: ['facebook', 'sms']
      message:
        type: string
        example: 'Test message'
  Notification:
    type: object
    required:
      - subject 
      - notification
    properties:
      description:
        type: string 
        description: Description of the notification 
        example: 'Send text message'
      subject:
        $ref: '#/definitions/NotificationSubject'
      notification:
        $ref: '#/definitions/SocialMessageBatch'
      expires:
        type: dateTime
        description: expiration date 
        example: '2017-10-13T14:51:22.12Z'
      throttling:
        type: number
        description: minimum interval between two messages in seconds
        example: 3600
  NotificationEntity:
    type: object
    properties:
      EntityName:
        type: string 
        example: 'Sensor1'
  NotificationCondition:
    type: object
    properties:
      attrs:
        type: array
        items:
          type: string 
          example: 'SM1'
      expression:
        type: string
        example: 'SM1>40'
  NotificationSubject:
    type: object
    required:
      - entities 
      - condition
    properties:
      entityNames:
        type: array
        items:
          type: string
          example: 'Sensor1'
      condition:
        $ref: '#/definitions/NotificationCondition'
  User:
    type: object
    properties:
      id:
        type: string
        example: "eb78eed6-d01a-4f69-b562-1f30002c08d9"
      username:
        type: string
        example: "cdupont"
      createdTime:
        type: dateTime
        example: "2017-09-01T20:00:00.00Z"
      firstName:
        type: string
        example: "Corentin"
      lastName:
        type: string
        example: "Dupont"
      subservice:
        type: string
        example: "farm1"
      email:
        type: string
        example: "test@gmail.com"
      phone:
        type: string
        example: "+390000000"
      address:
        type: string
        example: "25 Test street"
      facebook:
        type: string
        example: "test1"
      twitter:
        type: string
        example: "@Test1"
      roles:
        type: string
        example: "admin"
  Domain:
    type: object
    properties:
      id:
        type: string
        example: "farm1"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header


paths:
  '/domains':
    get:
      summary: list domains
      tags:
        - Domains
      produces:
        - application/json
      security:
        - Bearer: []
      responses:
        '200':
          description: 'get domains'
          schema:
            type: array
            items:
              $ref: '#/definitions/Domain'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a domain
      tags:
        - Domains
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Domain'
      security:
        - Bearer: []
      responses:
        '201':
          description: Domain created succesfully
        '422':
          description: Unprocessable entity
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}':
    get:
      summary: get domain
      description: ''
      tags:
        - Domains
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: 'get domain'
          schema:
            $ref: '#/definitions/Domain'
        '400':
          description: Bad request
        '404':
          description: Not Found
        '422':
          description: Unprocessable entity
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete domain
      tags:
        - Domains
      parameters:
        - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors':
    get:
      summary: Sensor data
      description: ''
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - in: query
          name: q
          schema:
            type: string
          description: filter the results
          example: 'owner==cdupont'
          required: false
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Sensor'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create sensors
      description: Endpoint to create sensing devices.
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Sensor'
        - $ref: '#/parameters/domainParam'
      responses:
        '201':
          description: Sensor created succesfully
        '422':
          description: Unprocessable entity
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}':
    get:
      summary: get sensor
      description: ''
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Sensor'
        '400':
          description: Bad request
        '404':
          description: Not Found
        '422':
          description: Unprocessable entity
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete sensor
      description: ''
      tags:
        - Sensors
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
      security:
        - Bearer: []
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/owner':
    put:
      summary: insert owner
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the owner of the sensor
            example: cdupont
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
        '404':
          description: Not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/location':
    put:
      summary: insert location
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
        '404':
          description: Not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/name':
    put:
      summary: insert name
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the owner of the sensor
            example: Sensor1
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
        '404':
          description: Not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements':
    get:
      summary: get measurements
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Measurement'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: insert new measurement
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Measurement'
      responses:
        '200':
          description: Measurement created/updated succesfully
        '404':
          description: Not Found
        '422':
          description: Unprocessable entity
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}':
    get:
      summary: get measurement
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - name: measurement_id
          in: path
          required: true
          type: string
          example: 0d710b12-27e8-433d-ab3a-e05b7127eeaa
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Measurement'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete measurement
      description: ''
      tags:
        - Sensors
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/name':
    put:
      summary: put measurement name
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the measurement name
            example: TC1
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/dimension':
    put:
      summary: put measurement dimension
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the measurement dimension
            example: temperature
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/unit':
    put:
      summary: put measurement unit
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the measurement unit
            example: °C
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/sensor_kind':
    put:
      summary: insert sensor kind
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the sensor kind
            example: Soil moisture sensor
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
        '404':
          description: Not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/values':
    get:
      summary: get measurement values
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/MeasurementValue'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create new datapoint
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MeasurementValue'
      responses:
        '201':
          description: Datapoint created succesfully
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  /domains/{domain}/history:
    get:
      summary: Get Historical data for analysis
      tags:
        - Historical data
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/HistoricalValue'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /domains/{domain}/auth/:
    post:
      summary: Get the access token for subsequent calls
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: credentials
          in: body
          description: auth credentials
          required: true
          schema:
            $ref: '#/definitions/AuthBody'
      responses:
        '200':
          description: Return the access token
        '404':
          description: Something wrong happened
  /domains/{domain}/users/:
    get:
      tags:
        - Users
      summary: Get all users in a realm
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
      responses:
        '200':
          description: return users
        '404':
          description: Something wrong happened
    post:
      tags:
        - Users
      summary: Create a new user in a realm
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: user
          in: body
          description: user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: return created user
        '404':
          description: Something wrong happened
  /domains/{domain}/users/search/:
    get:
      tags:
        - Users
      summary: Search users with specific criteria
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
      responses:
        '200':
          description: return filtered users
        '404':
          description: Something wrong happened
  /domains/{domain}/users/{userid}:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/UserId'
      responses:
        '200':
          description: Return the user with the specified id
        '404':
          description: Not found
    put:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/UserId'
        - name: data
          in: body
          description: user data to update
          required: true
          schema:
            $ref: '#/definitions/UserUpdateBody'
    delete:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/UserId'        
      responses:
        '200':
          description: User is successfuly deleted
        '404':
          description: Not found


  /domains/{domain}/socials:
    get:
      summary: Get all messages sent
      tags:
        - Socials
      produces:
      - "application/json"
      parameters:
        - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/SocialMessage'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    post:
      summary: post a message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: data
          in: body
          description: social message
          required: true
          schema:
            $ref: '#/definitions/SocialMessage'
      responses:
        '200':
          description: message sent
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /domains/{domain}/socials/{msg_id}:
    get:
      summary: Get one message
      tags:
        - Socials
      produces:
      - "application/json"
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/MsgId'
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/SocialMessage'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete a message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/MsgId'
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /domains/{domain}/socials/batch:
    post:
      summary: post several message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: data
          in: body
          description: social message
          required: true
          schema:
            $ref: '#/definitions/SocialMessageBatch'
      responses:
        '200':
          description: messages sent
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /domains/{domain}/notifications:
    get:
      summary: Get all notifications 
      tags:
        - Notifications
      produces:
      - "application/json"
      parameters:
        - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/Notification'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    post:
      summary: post a message to social networks
      tags:
        - Notifications
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: data
          in: body
          description: social message
          required: true
          schema:
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: message sent
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /domains/{domain}/notifications/{notif_id}:
    get:
      summary: Get one message
      tags:
        - Notifications
      produces:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/NotifId'
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/Notification'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete a message to social networks
      tags:
        - Notifications
      consumes:
      - "application/json"
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/NotifId'
      security:
        - Bearer: []
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /spec:
    get:
      tags:
        - Specification
      responses:
        '200':
          description: Return the API specification
