swagger: '2.0'
info:
  title: WAZIUP API
  description: "This API allows you to access all Waziup services.
    In order to access protected services, first get a token with POST /auth/token.
    Then insert this token in the authorization key, specifying \"Bearer\" in front. For example \"Bearer eyJhbGc...\"."
  version: 2.0.0
host: '127.0.0.1:8000'
schemes:
  - http
  - https
basePath: /api/v1
produces:
  - application/json
consumes:
  - application/json
parameters:
  deviceId:
    name: device_id
    in: path
    required: true
    type: string
    example: MyDevice
  sensorId:
    name: sensor_id
    in: path
    required: true
    type: string
    example: TC1
  actuatorId:
    name: actuator_id
    in: path
    required: true
    type: string
    example: LED1
  gatewayId:
    name: gateway_id
    in: path
    required: true
    type: string
    example: GW1
  MsgId:
    name: msg_id
    in: path
    required: true
    type: string
    example: 0d710b12-27e8-433d-ab3a-e05b7127eeac
  NotifId:
    name: notif_id
    in: path
    required: true
    type: string
    example: 0d710b12-27e8-433d-ab3a-e05b7127eeac
  UserId:
    name: userid
    in: path
    required: true
    type: string
    example: 2ecfae24-f340-4ad0-a12e-02cdc60cd8ba
  lastN:
    name: lastN
    in: query
    schema:
      type: string
    description: "get the last N entries, most recent first. Default value is 20."
    example: '20'
    required: false
  limit:  
    in: query
    name: limit
    schema:
      type: string
    description: "In case of pagination, number of entris per page"
    example: '50'
    required: false
  offset:
    in: query
    name: offset
    schema:
      type: string
    description: "In case of pagination, offset for the starting entry"
    example: '0'
    required: false
  dateFrom:
    in: query
    name: dateFrom
    schema:
      type: string
    description: "The starting date and time from which the entries are desired. It is an optional parameter."
    example: '2016-01-01T00:00:00.000Z'
    required: false
  dateTo:  
    in: query
    name: dateTo
    schema:
      type: string
    description: "The final date and time until which the entries are desired. It is an optional parameter."
    example: '2019-01-31T23:59:59.999Z'
    required: false
definitions:
  Device:
    type: object
    required:
      - id
      - domain
    properties:
      id:
        type: string
        description: Unique ID of the device
        example: MyDevice
      gateway_id:
        type: string
        description: Unique ID of the gateway
        example: ea0541de1ab7132a1d45b85f9b2139f5
      name:
        type: string
        description: name of the device
        example: "My weather station"
      owner:
        type: string
        description: owner of the device
        readOnly: true
        example: cdupont
      sensors:
        type: array
        items:
          $ref: '#/definitions/Sensor'
      actuators:
        type: array
        items:
          $ref: '#/definitions/Actuator'
      location:
        $ref: '#/definitions/Location'
      domain:
        type: string
        description: the domain of this sensor.
        example: waziup
      date_created:
        type: string
        format: datetime
        readOnly: true
        description: creation date of the sensor node
        example: '2016-06-08T18:20:27.873Z'
      date_updated:
        type: string
        format: datetime
        readOnly: true
        description: last update date of the sensor node
        example: '2016-06-08T18:20:27.873Z'
      visibility:
        type: string
        schema:
          type: string
          enum: [public, private]
        description: this sensor can be public or private
        example: public
  Location:
    type: object
    description: >-
      location is a pair [latitude, longitude] with the coordinates on earth in
      decimal notation (e.g. [40.418889, 35.89389]).
    required:
      - latitude
      - longitude
    properties:
      latitude:
        type: number
        example: 5.36
      longitude:
        type: number
        example: 4.0083
  Visibility:
    type: string
    description: Visibility can be either public or private.
    enum:
      - public
      - private
  Sensor:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: ID of the sensor
        example: TC1
      name:
        type: string
        description: name of the sensor
        example: My garden temperature
      sensing_device:
        type: string
        description: sensing platform used for the measurement, from https://github.com/Waziup/waziup-js/blob/master/src/model/SensingDevices.js 
        example: SoilThermometer
      quantity_kind:
        type: string
        description: quantity measured, from https://github.com/Waziup/waziup-js/blob/master/src/model/QuantityKinds.js
        example: SoilTemperature
      unit:
        type: string
        description: unit of the measurement, from https://github.com/Waziup/waziup-js/blob/master/src/model/Units.js
        example: DegreeCelsius
      last_value:
        $ref: '#/definitions/SensorValue'
        description: last value received by the platform
      calibration:
        $ref: '#/definitions/LinearCalibration'
        description: calibration measurements 
  SensorValue:
    type: object
    required:
      - value
    properties:
      value:
        type: number # generalize?
        format: float
        description: "value of the sensor measurement. It can be a string (e.g. \"abc\"), a number (e.g. 25.6), an array (e.g. [12, 13]), a boolean (e.g. true), a JSON structure (e.g. {\"test\": 24})"
        example: '25.6'
      timestamp:
        type: string
        format: datetime
        description: time of the measurement
        example: '2016-06-08T18:20:27.873Z'
      date_received:
        type: string
        format: datetime
        description: time at which the measurement has been received on the Cloud
        example: '2016-06-08T18:20:27.873Z'
        readOnly: true
  SensorData:
    type: object
    required:
      - value
    readOnly: true
    properties:
      deviceId:
        in: body
        required: true
        type: string
        example: MyDevice
      sensorId:
        in: body
        required: true
        type: string
        example: TC1
      datapoint:
        $ref: '#/definitions/SensorValue'
        required: true
        description: last value received by the platform
  LinearCalibration:
    type: object
    properties:
      valueMin:
        $ref: '#/definitions/LinearCalibrationValue'
        required: true
        description: calibration measurement with minimum values for the sensor
      valueMax:
        $ref: '#/definitions/LinearCalibrationValue'
        required: true
        description: calibration measurement with maximum values for the sensor
  LinearCalibrationValue:
    type: object
    properties:
      sensorValue:
        in: body
        required: true
        type: string
        example: 900
      realValue:
        in: body
        required: true
        type: string
        example: 100
  Actuator:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: ID of the actuator
        example: LED1
      name:
        type: string
        description: name of the actuator
        example: My lamp
      actuating_device:
        type: string
        description: actuating platform used 
        example: Lamp
      control_type:
        type: string
        description: the type of the control value. It must be a string with one of the following values: "string", "number", "object", "array", "boolean", "null".
        enum: [string, number, object, array, boolean, null]
        example: number
      value:
        type: string
        description: the value of the actuation 
        example: 50
  Gateway:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: ID of the gateway
        example: GW1
      name:
        type: string
        description: name of the gateway
        example: My office gateway
      services:
        type: array
        items:
          $ref: '#/definitions/GatewayServices'
        description: the services of the gateway
  GatewayServices:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: ID of the gateway service
        example: HTTP
      status:
        type: string
        description: status of the gateway service
        enum: [active, inactive]
        example: active
      port:
        type: number
        description: the tunnel port of the gateway service if active
        example: active
  Error:
    type: object
    properties:
      error:
        type: string
      description:
        type: string
  AuthBody:
    type: object
    title: credentials
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: username
        example: cdupont
      password:
        type: string
        description: password
        example: password
  SocialMessage:
    type: object
    description: One social network message
    required:
      - user_id 
      - channel
      - message
    properties:
      username:
        type: string
        description: User name in Keycloak
        example: 'cdupont'
      channel:
        type: string
        example: 'twitter'
      message:
        type: string
        example: 'Test message'
  SocialMessageBatch:
    type: object
    description: A message to be sent to several users and socials
    required:
      - userNames 
      - channels
      - message
    properties:
      usernames:
        type: array
        description: names of the destination users 
        items:
          type: string 
        example: ['cdupont']
      channels:
        type: array
        description: channels where to send the messages 
        items:
          type: string 
        example: ['twitter']
      message:
        type: string
        example: 'Test message'
  Notification:
    type: object
    required:
      - condition 
      - notification
    properties:
      id:
        type: string
        description: id of the notification (attributed by the server)
        readOnly: true
      description:
        type: string 
        description: Description of the notification 
        example: 'Send text message'
      condition:
        $ref: '#/definitions/NotificationCondition'
      notification:
        $ref: '#/definitions/SocialMessageBatch'
      expires:
        type: dateTime
        description: expiration date 
        example: '2030-10-13T14:51:22.12Z'
      throttling:
        type: number
        description: minimum interval between two messages in seconds
        example: 3600
      times_sent:
        type: number
        description: number of notifications sent 
        readOnly: true
      last_notification:
        type: dateTime
        description: last notification send date 
        example: '2019-10-13T14:51:22.12Z'
        readOnly: true
      status:
        type: string
        schema:
          type: string
          enum: [active, inactive, expired, failed]
        description: Description of the notification 
        example: 'active'

  NotificationCondition:
    type: object
    required:
      - sensors 
      - condition
    properties:
      sensors:
        type: array
        items:
          type: string
          example: 'MySensor'
      measurements:
        type: array
        items:
          type: string 
          example: 'TC1'
      expression:
        type: string
        example: 'TC1<40'
  User:
    type: object
    properties:
      id:
        type: string
        example: "eb78eed6-d01a-4f69-b562-1f30002c08d9"
        readOnly: true
      username:
        type: string
        example: "cdupont"
      createdTime:
        type: dateTime
        example: "2017-09-01T20:00:00.00Z"
        readOnly: true
      firstName:
        type: string
        example: "Corentin"
      lastName:
        type: string
        example: "Dupont"
      email:
        type: string
        example: "test@gmail.com"
      phone:
        type: string
        example: "+390000000"
      address:
        type: string
        example: "25 Test street"
      facebook:
        type: string
        example: "test1"
      twitter:
        type: string
        example: "Test1"
  Domain:
    type: object
    properties:
      id:
        type: string
        example: "farm1"
  Permission:
    type: object
    properties:
      resource:
        type: string
        $ref: '#/definitions/Resource'
      scopes:
        type: array
        items:
          $ref: '#/definitions/Scope'
  Scope:
    type: string
    enum:
      - devices:create
      - devices:view
      - devices:update
      - devices:delete
      - sensors-data:create
      - sensors-data:view
      - socials:create
      - socials:view
      - socials:update
      - socials:delete
      - notifications:create
      - notifications:view
      - notifications:update
      - notifications:delete
      - history:create
      - history:view
      - history:update
      - history:delete
      - users:create
      - users:view
      - users:update
      - users:delete
  Resource:
    type: string
    enum:
      - Sensors
      - Domains
      - History
      - Notifications
      - Socials
      - Users
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header


paths:
  #Authentication
  /auth/token:
    post:
      summary: Get the access token for subsequent calls
      tags:
        - Auth
      parameters:
        - name: credentials
          in: body
          description: auth credentials
          required: true
          schema:
            $ref: '#/definitions/AuthBody'
      responses:
        '200':
          description: Return the access token
          schema:
            type: string
        '404':
          description: Something wrong happened
  /auth/permissions:
    get:
      summary: Get all user permissions
      tags:
        - Auth 
      produces:
      - "application/json"
      security:
        - Bearer: []
      responses:
        '200':
          description: list of permissions
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'

  #Devices
  /devices:
    get:
      summary: Get all devices
      description: ''
      tags:
        - Devices
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: filter the results
          example: 'owner==cdupont'
          required: false
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Sensor'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create devices
      description: Endpoint to create devices.
      tags:
        - Devices
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        '201':
          description: Device created succesfully
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}:
    get:
      summary: get device
      description: ''
      tags:
        - Devices
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Device'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete device
      description: ''
      tags:
        - Devices
      parameters:
        - $ref: '#/parameters/deviceId'
      security:
        - Bearer: []
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/location:
    put:
      summary: insert location
      tags:
        - Devices
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/name:
    put:
      summary: insert name
      tags:
        - Devices
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the owner of the device
            example: Device1
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/gateway_id:
    put:
      summary: insert gateway id
      tags:
        - Devices
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the gateway id
            example: ea0541de1ab7132a1d45b85f9b2139f5
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/visibility:
    put:
      summary: insert device visibility (public or private)
      tags:
        - Devices
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  # Sensors
  /devices/{device_id}/sensors:
    get:
      summary: get sensors
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Sensor'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: insert new sensor
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Sensor'
      responses:
        '200':
          description: Sensor created/updated succesfully
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/sensors/{sensor_id}:
    get:
      summary: get sensor
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/sensorId'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Sensor'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete sensor
      description: ''
      tags:
        - Sensors
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/sensorId'
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/sensors/{sensor_id}/name:
    put:
      summary: put sensor name
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/sensorId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the sensor name
            example: TC1
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/sensors/{sensor_id}/quantity_kind:
    put:
      summary: put the quantity kind, from https://github.com/Waziup/waziup-js/blob/master/src/model/QuantityKinds.js 
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/sensorId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the quantity kind measured
            example: SoilTemperature
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/sensors/{sensor_id}/unit:
    put:
      summary: put sensing unit
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/sensorId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the sensing unit
            example: °C
            enum:
            - test1
            - test2
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/sensors/{sensor_id}/sensing_device:
    put:
      summary: insert sensing device used to perform the measurement, from https://github.com/Waziup/waziup-js/blob/master/src/model/SensingDevices.js
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the sensing device
            example: SoilThermometer
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  # Actuators
  /devices/{device_id}/actuators:
    get:
      summary: get actuators
      tags:
        - Actuators
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Actuator'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: insert new actuator
      tags:
        - Actuators
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/actuatorId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Actuator'
      responses:
        '200':
          description: Actuator created/updated succesfully
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/actuators/{actuator_id}:
    get:
      summary: get actuator
      tags:
        - Actuators
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/actuatorId'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Actuator'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete actuator
      description: ''
      tags:
        - Actuators
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/actuatorId'
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/actuators/{actuator_id}/name:
    put:
      summary: put actuator name
      tags:
        - Actuators
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/actuatorId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the device name
            example: LED1
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/actuators/{actuator_id}/actuating_device:
    put:
      summary: put the actuating device 
      tags:
        - Actuators
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/actuatorId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the actuating device
            example: Lamp
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/actuators/{actuator_id}/control_type:
    put:
      summary: put the control type
      tags:
        - Actuators
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/actuatorId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the control type
            example: number
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{device_id}/actuators/{actuator_id}/value:
    put:
      summary: put the actuator value
      tags:
        - Actuators
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/deviceId'
        - $ref: '#/parameters/actuatorId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the actuator value
            example: 50
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  # Data
  /sensor-data:
    get:
      summary: get sensor values
      tags:
        - Sensor-data
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: deviceId
          in: query
          required: true
          type: string
          example: MyDevice
        - name: sensorId
          in: query
          required: true
          type: string
          example: TC1
        - $ref: '#/parameters/lastN'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/dateFrom'
        - $ref: '#/parameters/dateTo'
        - $ref: '#/parameters/format'
        - name: calib
          in: query
          type: string
          example: true
          description: indicate if the values provided must be calibrated by the server. Default is false (get raw values).
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/SensorData'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create new datapoint
      tags:
        - Sensor-data
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SensorData'
      responses:
        '201':
          description: Datapoint created succesfully
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  #Gateways
  /gateways:
    get:
      summary: Get all gateway
      description: ''
      tags:
        - Gateways
      produces:
        - application/json
      security:
        - Bearer: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Gateway'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create gateway
      description: ''
      tags:
        - Gateways
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Gateway'
      responses:
        '201':
          description: Gatway created succesfully
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /gateways/{gateway_id}:
    get:
      summary: get gateway
      description: ''
      tags:
        - Gateways
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/gatewayId'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Gateway'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete gateway
      description: ''
      tags:
        - Gateways
      parameters:
        - $ref: '#/parameters/gatewayId'
      security:
        - Bearer: []
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /users:
    get:
      tags:
        - Users
      summary: Get all users in a realm
      security:
        - Bearer: []
      responses:
        '200':
          description: return users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: Not Found 
          schema:
            $ref: '#/definitions/Error'
  /users/search:
    get:
      tags:
        - Users
      summary: Search users with specific criteria
      security:
        - Bearer: []
      responses:
        '200':
          description: return filtered users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: Something wrong happened
          schema:
            $ref: '#/definitions/Error'
  /users/{userid}:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/UserId'
      responses:
        '200':
          description: Return the user with the specified id
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'

  /socials:
    get:
      summary: Get all messages sent
      tags:
        - Socials
      produces:
      - "application/json"
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/SocialMessage'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    post:
      summary: post a message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - name: data
          in: body
          description: social message
          required: true
          schema:
            $ref: '#/definitions/SocialMessage'
      responses:
        '200':
          description: message sent
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /socials/{msg_id}:
    get:
      summary: Get one message
      tags:
        - Socials
      produces:
      - "application/json"
      parameters:
        - $ref: '#/parameters/MsgId'
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/SocialMessage'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete a message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/MsgId'
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /socials/batch:
    post:
      summary: post several message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - name: data
          in: body
          description: social message
          required: true
          schema:
            $ref: '#/definitions/SocialMessageBatch'
      responses:
        '200':
          description: messages sent
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /notifications:
    get:
      summary: Get all notifications 
      tags:
        - Notifications
      produces:
      - "application/json"
      security:
        - Bearer: []
      responses:
        '200':
          description: 'Received notifications' 
          schema:
            type: array
            items:
            $ref: '#/definitions/Notification'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    post:
      summary: create a notification
      tags:
        - Notifications
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - name: data
          in: body
          description: notification
          required: true
          schema:
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: message sent
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /notifications/{notif_id}:
    get:
      summary: Get one notification
      tags:
        - Notifications
      produces:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/NotifId'
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/Notification'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete a notification
      tags:
        - Notifications
      consumes:
      - "application/json"
      parameters:
        - $ref: '#/parameters/NotifId'
      security:
        - Bearer: []
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /notifications/{notif_id}/status:
    put:
      summary: Activate/Deactivate one notification
      tags:
        - Notifications
      consumes:
      - "text/plain"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/NotifId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            enum: [active, inactive]
            description: the new status of the notification
            example: active
      responses:
        '200':
          description: modified
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
