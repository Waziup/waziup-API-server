swagger: '2.0'
info:
  title: WAZIUP API
  description: "This API allows you to access all Waziup services.
    In order to access protected services, first get a token with POST /auth/token.
    Then insert this token in the authorization key, specifying \"Bearer\" in front. For example \"Bearer eyJhbGc...\"."
  version: 1.0.0
host: '127.0.0.1:8000'
schemes:
  - http
  - https
basePath: /api/v1
produces:
  - application/json
consumes:
  - application/json
parameters:
  domainParam:
    name: domain
    in: path
    required: false
    type: string
    example: waziup
  sensorId:
    name: sensor_id
    in: path
    required: true
    type: string
    example: Sensor2-ea0541de1ab7132a1d45b85f9b2139f5
  measurementId:
    name: measurement_id
    in: path
    required: true
    type: string
    example: TC1
  entityType:
    name: entity_type
    in: path
    required: true
    type: string
    example: Room
  entityId:
    name: entity_id
    in: path
    required: true
    type: string
    example: Barn4
  entityAttr:
    name: entity_attribute
    in: path
    required: true
    type: string
    example: Temperature
  MsgId:
    name: msg_id
    in: path
    required: true
    type: string
    example: 0d710b12-27e8-433d-ab3a-e05b7127eeac
  NotifId:
    name: notif_id
    in: path
    required: true
    type: string
    example: 0d710b12-27e8-433d-ab3a-e05b7127eeac
  UserId:
    name: userid
    in: path
    required: true
    type: string
    example: 2ecfae24-f340-4ad0-a12e-02cdc60cd8ba
  lastN:
    name: lastN
    in: query
    schema:
      type: string
    description: "get the last N entries, most recent first. Default value is 20."
    example: '20'
    required: false
  limit:  
    in: query
    name: limit
    schema:
      type: string
    description: "In case of pagination, number of entris per page"
    example: '50'
    required: false
  offset:
    in: query
    name: offset
    schema:
      type: string
    description: "In case of pagination, offset for the starting entry"
    example: '0'
    required: false
  dateFrom:
    in: query
    name: dateFrom
    schema:
      type: string
    description: "The starting date and time from which the entries are desired. It is an optional parameter."
    example: '2016-01-01T00:00:00.000Z'
    required: false
  dateTo:  
    in: query
    name: dateTo
    schema:
      type: string
    description: "The final date and time until which the entries are desired. It is an optional parameter."
    example: '2019-01-31T23:59:59.999Z'
    required: false
definitions:
  Sensor:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: Unique ID of the sensor node
        example: Sensor2-ea0541de1ab7132a1d45b85f9b2139f5
      gateway_id:
        type: string
        description: Unique ID of the gateway
        example: ea0541de1ab7132a1d45b85f9b2139f5
      name:
        type: string
        description: name of the sensor node
        example: "My weather station"
      owner:
        type: string
        description: owner of the sensor node
        example: cdupont
      measurements:
        type: array
        items:
          $ref: '#/definitions/Measurement'
      location:
        $ref: '#/definitions/Location'
      domain:
        type: string
        description: the domain of this sensor.
        example: waziup
  Location:
    type: object
    description: >-
      location is a pair [latitude, longitude] with the coordinates on earth in
      decimal notation (e.g. [40.418889, 35.89389]).
    required:
      - latitude
      - longitude
    properties:
      latitude:
        type: number
        example: 5.36
      longitude:
        type: number
        example: 4.0083
  Measurement:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: ID of the measurement
        example: TC1
      name:
        type: string
        description: name of the measurement
        example: My garden temperature
      sensing_device:
        type: string
        description: sensing platform used for the measurement, from https://github.com/Waziup/waziup-js/blob/master/src/model/SensingDevices.js 
        example: SoilThermometer
      quantity_kind:
        type: string
        description: quantity measured, from https://github.com/Waziup/waziup-js/blob/master/src/model/QuantityKinds.js
        example: SoilTemperature
      unit:
        type: string
        description: unit of the measurement, from https://github.com/Waziup/waziup-js/blob/master/src/model/Units.js
        example: DegreeCelsius
      last_value:
        $ref: '#/definitions/MeasurementValue'
        description: last value received by the platform
  MeasurementValue:
    type: object
    required:
      - value
    readOnly: true
    properties:
      value:
        type: number
        format: float
        description: value of the measurement
        example: '25.6'
      timestamp:
        type: string
        format: datetime
        description: time of the measurement
        example: '2016-06-08T18:20:27.873Z'
      date_received:
        type: string
        format: datetime
        description: time at which the measurement has been received on the Cloud
        example: '2016-06-08T18:20:27.873Z'
        readOnly: true
  EntityType:
    type: string
    description: A type of an entity.
    example: Room
  Entity:
    type: object
    description: >-
      An entity is a general object with type and name,
      implementing different userdefined attributes.
    required:
      - id
      - type
    properties:
      id:
        type: string
        description: Unique name (ID) of the entity.
        example: Barn4
      type:
        $ref: '#/definitions/EntityType'
  EntityWithAttr:
    type: object
    description: >-
      An entity is a general object with type and name,
      implementing different userdefined attributes.
    required:
      - id
      - type
    additionalProperties: true
    properties:
      id:
        type: string
        description: Unique name (ID) of the entity.
        example: Barn4
      type:
        $ref: '#/definitions/EntityType'
      attribute1:
        type: array
        description: An example attribute with string values.
        items:
          type: string
          example: 'Text Content..'
      attribute2:
        type: array
        description: An example attribute with number values.
        items:
          type: number
          example: '27'
      attributeN:
        type: array
        description: An example attribute with object values.
        items:
          type: object
          properties:
            latitude:
              type: number
              example: 51.412
            longitude:
              type: number
              example: 12.564
  EntityWithCurrentAttr:
    type: object
    description: >-
      An entity is a general object with type and name,
      implementing different userdefined attributes.
    required:
      - id
      - type
    additionalProperties: true
    properties:
      id:
        type: string
        description: Unique name (ID) of the entity.
        example: Barn4
      type:
        $ref: '#/definitions/EntityType'
      attribute1:
        type: string
        description: An example attribute with string values.
        example: 'Text Content..'
      attribute2:
        type: number
        description: An example attribute with number values.
        example: '27'
      attributeN:
        type: object
        description: An example attribute with object values.
        properties:
          latitude:
            type: number
            example: 51.412
          longitude:
            type: number
            example: 12.564
  EntityAttr:
    anyOf:
      - type: string
      - type: number
      - type: integer
      - type: boolean
      - type: object
    description: An entity attribute value that could be any type.
    example: {"value": "25.6","timestamp": "2016-06-08T18:20:27.873Z"}
  HistoricalValue:
    type: object
    properties:
      id:
        type: string
        description: UUID of the sensor
        example: 0d710b12-27e8-433d-ab3a-e05b7127eeaa
      attribute_id:
        type: string
        description: UUID of the measurement
        example: 0d710b12-27e8-433d-ab3a-e05b7127eeaa
      datapoint:
        $ref: '#/definitions/MeasurementValue'
  Error:
    type: object
    properties:
      error:
        type: string
      description:
        type: string
  AuthBody:
    type: object
    title: credentials
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: username
        example: cdupont
      password:
        type: string
        description: password
        example: password
  SocialMessage:
    type: object
    description: One social network message
    required:
      - user_id 
      - channel
      - message
    properties:
      username:
        type: string
        description: User name in Keycloak
        example: 'cdupont'
      channel:
        type: string
        example: 'facebook'
      message:
        type: string
        example: 'Test message'
  SocialMessageBatch:
    type: object
    description: A message to be sent to several users and socials
    required:
      - userNames 
      - channels
      - message
    properties:
      usernames:
        type: array
        description: names of the destination users 
        items:
          type: string 
        example: ['cdupont', 'arahim']
      channels:
        type: array
        description: channels where to send the messages 
        items:
          type: string 
        example: ['facebook', 'sms']
      message:
        type: string
        example: 'Test message'
  Notification:
    type: object
    required:
      - subject 
      - notification
    properties:
      id:
        type: string
        description: id of the notification (attributed by the server)
      description:
        type: string 
        description: Description of the notification 
        example: 'Send text message'
      subject:
        $ref: '#/definitions/NotificationSubject'
      notification:
        $ref: '#/definitions/SocialMessageBatch'
      expires:
        type: dateTime
        description: expiration date 
        example: '2017-10-13T14:51:22.12Z'
      throttling:
        type: number
        description: minimum interval between two messages in seconds
        example: 3600
  NotificationCondition:
    type: object
    properties:
      attrs:
        type: array
        items:
          type: string 
          example: 'SM1'
      expression:
        type: string
        example: 'SM1>40'
  NotificationSubject:
    type: object
    required:
      - entities 
      - condition
    properties:
      entityNames:
        type: array
        items:
          type: string
          example: 'Sensor1'
      condition:
        $ref: '#/definitions/NotificationCondition'
  User:
    type: object
    properties:
      id:
        type: string
        example: "eb78eed6-d01a-4f69-b562-1f30002c08d9"
      username:
        type: string
        example: "cdupont"
      createdTime:
        type: dateTime
        example: "2017-09-01T20:00:00.00Z"
      firstName:
        type: string
        example: "Corentin"
      lastName:
        type: string
        example: "Dupont"
      subservice:
        type: string
        example: "farm1"
      email:
        type: string
        example: "test@gmail.com"
      phone:
        type: string
        example: "+390000000"
      address:
        type: string
        example: "25 Test street"
      facebook:
        type: string
        example: "test1"
      twitter:
        type: string
        example: "@Test1"
      roles:
        type: string
        example: "admin"
  Domain:
    type: object
    properties:
      id:
        type: string
        example: "farm1"
  Permission:
    type: object
    properties:
      resource:
        type: string
        $ref: '#/definitions/Resource'
      scopes:
        type: array
        items:
          $ref: '#/definitions/Scope'
  Scope:
    type: string
    enum:
      - sensors:create
      - sensors:view
      - sensors:update
      - sensors:delete
      - domains:create
      - domains:view
      - domains:update
      - domains:delete
      - socials:create
      - socials:view
      - socials:update
      - socials:delete
      - notifications:create
      - notifications:view
      - notifications:update
      - notifications:delete
      - history:create
      - history:view
      - history:update
      - history:delete
      - users:create
      - users:view
      - users:update
      - users:delete
  Resource:
    type: string
    enum:
      - Sensors
      - Domains
      - History
      - Notifications
      - Socials
      - Users
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header


paths:
  /auth/token:
    post:
      summary: Get the access token for subsequent calls
      tags:
        - Auth
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: credentials
          in: body
          description: auth credentials
          required: true
          schema:
            $ref: '#/definitions/AuthBody'
      responses:
        '200':
          description: Return the access token
          schema:
            type: string
        '404':
          description: Something wrong happened
  /auth/permissions:
    get:
      summary: Get all user permissions
      tags:
        - Auth 
      produces:
      - "application/json"
      security:
        - Bearer: []
      responses:
        '200':
          description: list of permissions
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'

  '/domains':
    get:
      summary: list domains
      tags:
        - Domains
      produces:
        - application/json
      security:
        - Bearer: []
      responses:
        '200':
          description: 'get domains'
          schema:
            type: array
            items:
              $ref: '#/definitions/Domain'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a domain
      tags:
        - Domains
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Domain'
      security:
        - Bearer: []
      responses:
        '201':
          description: Domain created succesfully
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}':
    get:
      summary: get domain
      description: ''
      tags:
        - Domains
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: 'get domain'
          schema:
            $ref: '#/definitions/Domain'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete domain
      tags:
        - Domains
      parameters:
        - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors':
    get:
      summary: Sensor data
      description: ''
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - in: query
          name: q
          schema:
            type: string
          description: filter the results
          example: 'owner==cdupont'
          required: false
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Sensor'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create sensors
      description: Endpoint to create sensing devices.
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Sensor'
        - $ref: '#/parameters/domainParam'
      responses:
        '201':
          description: Sensor created succesfully
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}':
    get:
      summary: get sensor
      description: ''
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Sensor'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete sensor
      description: ''
      tags:
        - Sensors
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
      security:
        - Bearer: []
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/owner':
    put:
      summary: insert owner
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the owner of the sensor
            example: cdupont
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/location':
    put:
      summary: insert location
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/name':
    put:
      summary: insert name
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the owner of the sensor
            example: Sensor1
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/gateway_id':
    put:
      summary: insert gateway id
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the gateway id
            example: ea0541de1ab7132a1d45b85f9b2139f5
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements':
    get:
      summary: get measurements
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Measurement'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: insert new measurement
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Measurement'
      responses:
        '200':
          description: Measurement created/updated succesfully
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}':
    get:
      summary: get measurement
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Measurement'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete measurement
      description: ''
      tags:
        - Sensors
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/name':
    put:
      summary: put measurement name
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the measurement name
            example: TC1
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/quantity_kind':
    put:
      summary: put the quantity kind, from https://github.com/Waziup/waziup-js/blob/master/src/model/QuantityKinds.js 
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the quantity kind measured
            example: SoilTemperature
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/unit':
    put:
      summary: put measurement unit
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - name: body
          in: body
          required: true
          schema:
            type: string
            description: the measurement unit
            example: °C
            enum:
            - test1
            - test2
      responses:
        '200':
          description: Replaced
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/sensing_device':
    put:
      summary: insert sensing device used to perform the measurement, from https://github.com/Waziup/waziup-js/blob/master/src/model/SensingDevices.js
      tags:
        - Sensors
      consumes:
        - text/plain
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - in: body
          name: body
          required: true
          schema:
            type: string
            description: the sensing device
            example: SoilThermometer
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/sensors/{sensor_id}/measurements/{measurement_id}/values':
    get:
      summary: get measurement values
      tags:
        - Sensors
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - $ref: '#/parameters/lastN'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/dateFrom'
        - $ref: '#/parameters/dateTo'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/MeasurementValue'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create new datapoint
      tags:
        - Sensors
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/sensorId'
        - $ref: '#/parameters/measurementId'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MeasurementValue'
      responses:
        '201':
          description: Datapoint created succesfully
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  '/domains/{domain}/entities':
    post:
      summary: create a new entity
      description: Endpoint to create a new entity with type and name.
      tags:
        - Entities
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EntityWithAttr'
        - $ref: '#/parameters/domainParam'
      responses:
        '201':
          description: Entity created succesfully
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/entities/types':
    get:
      summary: get all known entity types
      tags:
        - Entities
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
      responses:
        '200':
          description: ''
          schema:
            type: array
            description: >-
              A list of all know entity types.
            items:
              $ref: '#/definitions/EntityType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/entities/{entity_type}':
    get:
      summary: get entities of one type
      tags:
        - Entities
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/entityType'
      responses:
        '200':
          description: ''
          schema:
            type: array
            description: >-
              A list of all entities with that type,
              which might be empty if there are no entities for this domain.
            items:
              $ref: '#/definitions/Entity'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/entities/{entity_type}/{entity_id}':
    get:
      summary: get a single entity
      tags:
        - Entities
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/entityType'
        - $ref: '#/parameters/entityId'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/EntityWithCurrentAttr'
        '404':
          description: Not Found
    delete:
      summary: delete a single entity
      description: ''
      tags:
        - Entities
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/entityType'
        - $ref: '#/parameters/entityId'
      security:
        - Bearer: []
      responses:
        '201':
          description: Deleted
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
  '/domains/{domain}/entities/{entity_type}/{entity_id}/{entity_attribute}':
    get:
      summary: get entity attribute values
      description: >-
        Get all stored values of a single attribute.
        
        - If there multiple values (from multiple PUT requests), this returns an array with all values (newest first).
        
        - If there is only one value (from a POST request), this returns an array with only one element.
      tags:
        - Entities
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/entityType'
        - $ref: '#/parameters/entityId'
        - $ref: '#/parameters/entityAttr'
      responses:
        '200':
          description: ''
          schema:
            type: array
            description: 'A list of all recieved attribute values.'
            items:
              $ref: '#/definitions/EntityAttr'
        '404':
          description: Entity Not Found
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete an entity attribute
      description: 'Drop all stored entity data and remove the attribute.'
      tags:
        - Entities
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/entityType'
        - $ref: '#/parameters/entityId'
        - $ref: '#/parameters/entityAttr'
      security:
        - Bearer: []
      responses:
        '201':
          description: Deleted
        '404':
          description: Entity Not found
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: add an entity attribute value
      description: >-
        Add new a value to the list of stored values for this attribute.
        If this attribute does not exist, it will be created within this request.
      tags:
        - Entities
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/entityType'
        - $ref: '#/parameters/entityId'
        - $ref: '#/parameters/entityAttr'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EntityAttr'
      responses:
        '201':
          description: Added
        '404':
          description: Entity Not Found
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: set entity attribute values
      description: >-
        Set new values for this attribute, removing all previous values.
        If this attribute does not exist, it will be created within this request.
      tags:
        - Entities
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/entityType'
        - $ref: '#/parameters/entityId'
        - $ref: '#/parameters/entityAttr'
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/EntityAttr'
      responses:
        '201':
          description: Set
        '404':
          description: Entity Not Found
          schema:
            $ref: '#/definitions/Error'
  /history:
    get:
      summary: Get Historical data for analysis
      tags:
        - Historical data
      produces:
      - "application/json"
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/HistoricalValue'
        '404':
          description: Not Found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /domains/{domain}/users/:
    get:
      tags:
        - Users
      summary: Get all users in a realm
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
      responses:
        '200':
          description: return users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: Not Found 
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Users
      summary: Create a new user in a realm
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: user
          in: body
          description: user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: return created user
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
  /domains/{domain}/users/search/:
    get:
      tags:
        - Users
      summary: Search users with specific criteria
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
      responses:
        '200':
          description: return filtered users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: Something wrong happened
          schema:
            $ref: '#/definitions/Error'
  /domains/{domain}/users/{userid}:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/UserId'
      responses:
        '200':
          description: Return the user with the specified id
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/UserId'
        - name: data
          in: body
          description: user data to update
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: user updated
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/UserId'        
      responses:
        '200':
          description: User is successfuly deleted
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'


  /domains/{domain}/socials:
    get:
      summary: Get all messages sent
      tags:
        - Socials
      produces:
      - "application/json"
      parameters:
        - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/SocialMessage'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    post:
      summary: post a message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: data
          in: body
          description: social message
          required: true
          schema:
            $ref: '#/definitions/SocialMessage'
      responses:
        '200':
          description: message sent
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /domains/{domain}/socials/{msg_id}:
    get:
      summary: Get one message
      tags:
        - Socials
      produces:
      - "application/json"
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/MsgId'
      security:
        - Bearer: []
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/SocialMessage'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete a message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/MsgId'
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /domains/{domain}/socials/batch:
    post:
      summary: post several message to social networks
      tags:
        - Socials
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: data
          in: body
          description: social message
          required: true
          schema:
            $ref: '#/definitions/SocialMessageBatch'
      responses:
        '200':
          description: messages sent
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /domains/{domain}/notifications:
    get:
      summary: Get all notifications 
      tags:
        - Notifications
      produces:
      - "application/json"
      parameters:
        - $ref: '#/parameters/domainParam'
      security:
        - Bearer: []
      responses:
        '200':
          description: 'Received notifications' 
          schema:
            type: array
            items:
            $ref: '#/definitions/Notification'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    post:
      summary: create a notification
      tags:
        - Notifications
      consumes:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - name: data
          in: body
          description: notification
          required: true
          schema:
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: message sent
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /domains/{domain}/notifications/{notif_id}:
    get:
      summary: Get one notification
      tags:
        - Notifications
      produces:
      - "application/json"
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/NotifId'
      responses:
        '200':
          description: array
          schema:
            $ref: '#/definitions/Notification'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete a notification
      tags:
        - Notifications
      consumes:
      - "application/json"
      parameters:
        - $ref: '#/parameters/domainParam'
        - $ref: '#/parameters/NotifId'
      security:
        - Bearer: []
      responses:
        '200':
          description: deleted
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
